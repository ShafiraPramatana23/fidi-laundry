package com.fidilaundry.app.ui.complaintimport android.Manifestimport android.app.Activityimport android.app.AlertDialogimport android.content.Intentimport android.content.pm.PackageManagerimport android.graphics.BitmapFactoryimport android.net.Uriimport android.os.Buildimport android.os.Bundleimport android.provider.MediaStoreimport android.view.Viewimport androidx.core.app.ActivityCompatimport androidx.core.content.ContextCompatimport androidx.core.content.FileProviderimport androidx.lifecycle.Observerimport com.bumptech.glide.Glideimport com.bumptech.glide.load.engine.DiskCacheStrategyimport com.fidilaundry.app.BuildConfigimport com.fidilaundry.app.Rimport com.fidilaundry.app.basearch.localpref.PaperPrefsimport com.fidilaundry.app.basearch.viewmodel.ComplaintViewModelimport com.fidilaundry.app.databinding.ActivityAdminComplaintBindingimport com.fidilaundry.app.model.request.ComplaintFeedbackRequestimport com.fidilaundry.app.model.request.UpdateOrderStatusRequestimport com.fidilaundry.app.model.response.BaseResponseimport com.fidilaundry.app.model.response.ComplaintListResponseimport com.fidilaundry.app.model.response.UpdateStatusResponseimport com.fidilaundry.app.ui.base.BaseActivityimport com.fidilaundry.app.ui.home.order.interfaces.IFItemClickimport com.fidilaundry.app.util.*import com.fidilaundry.app.util.fdialog.ConfirmMessageimport com.fidilaundry.app.util.fdialog.ErrorMessageimport com.fidilaundry.app.util.fdialog.FGCallbackimport com.fidilaundry.app.util.fdialog.SuccessMessageimport org.koin.androidx.viewmodel.ext.android.getViewModelimport java.io.Fileclass AdminComplaintActivity : BaseActivity(), IFItemClick {    lateinit var paperPrefs: PaperPrefs    lateinit var loadingDialog: LoadingDialog    lateinit var uri: Uri    private var file: File? = null    private var isGallery = false    private var isVisible = false    private var ticketId: Int = 0    private var data: ComplaintListResponse.Result? = null    private val binding: ActivityAdminComplaintBinding by binding(R.layout.activity_admin_complaint)    private val viewModel: ComplaintViewModel by lazy {        getViewModel(ComplaintViewModel::class)    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        binding.apply {            lifecycleOwner = this@AdminComplaintActivity            this.vm = viewModel        }        loadingDialog = LoadingDialog()        data = intent.getSerializableExtra("data") as ComplaintListResponse.Result        ticketId = data?.id!!        binding.tvOrder.text = ServiceCtgHelper().getServiceName(data?.order?.serviceID.toString())        binding.tvName.text = data?.order?.orderFor?.name        binding.iv.setImageResource(ServiceCtgHelper().getImgService(data?.order?.serviceID!!))        binding.tvTitle.text = data?.category        binding.tvDesc.text = data?.description        if (data!!.file?.isNotEmpty()!!) {            binding.ivComplaint.visibility = View.VISIBLE            Glide.with(this)                .load("https://storage.googleapis.com/"+data?.file)                .diskCacheStrategy(DiskCacheStrategy.NONE)                .skipMemoryCache(true)                .timeout(6000)                .into(binding.ivComplaint)        } else {            binding.ivComplaint.visibility = View.GONE        }        initViewModel()        binding.ivClose.setSafeOnClickListener {            binding.llBlankImg.visibility = View.VISIBLE            binding.rlImage.visibility = View.GONE            file = null        }        binding.llBlankImg.setSafeOnClickListener {            selectImage()        }        binding.ivBack.setSafeOnClickListener {            finish()        }        binding.btnSubmit.setSafeOnClickListener {            viewModel.feedbackComplaint(ComplaintFeedbackRequest(                ticketId, viewModel.descFeedback.value, ""            ))        }        binding.llUser.setSafeOnClickListener {            isVisible = !isVisible            binding.llDetail.visibility = if (isVisible) View.VISIBLE else View.GONE            binding.ivArrow.rotation = if (isVisible) 270F else 90F        }    }    private fun initViewModel() {        viewModel.feedbackComplaintRes.observe(this, Observer {            handleWhenComplaintSuccess(it)        })        viewModel.updateOrderStatusResponse.observe(this, Observer {            handleWhenUpdateStatusSuccess(it)        })        viewModel.showProgressLiveData.observe(this, Observer { showLoading ->            if (showLoading) {                if(loadingDialog != null){                    if(!loadingDialog.isShowLoad())                        loadingDialog.showProgressDialog(this, "Mohon tunggu…")                    else {                        loadingDialog.dismissDialog()                        loadingDialog.showProgressDialog(this, "Mohon tunggu…")                    }                }            } else {                loadingDialog.dismissDialog()            }        })        viewModel.showError.observe(this, Observer { showError ->            ErrorMessage(this, "", showError)        })    }    private fun handleWhenUpdateStatusSuccess(it: UpdateStatusResponse?) {        SuccessMessage(this, "", "Berhasil update feedback pengaduan", object : FGCallback {            override fun onCallback() {                finish()            }        })    }    private fun handleWhenComplaintSuccess(it: BaseResponse?) {        viewModel.updateOrderStatus(            UpdateOrderStatusRequest(                data?.order?.code!!,                StatusHelper.setStatus(data?.order?.status!!),                ""            )        )    }    private fun selectImage() {        val getImageFrom =            AlertDialog.Builder(this)        getImageFrom.setTitle("Unggah Gambar")        val opsChars = arrayOf<CharSequence>("Kamera", "Galeri")        getImageFrom.setItems(            opsChars        ) { dialog, which ->            if (which == 0) {                isGallery = false                cameraPermission()            } else if (which == 1) {                isGallery = true                galleryPermission()            }            dialog.dismiss()        }        getImageFrom.show()    }    private fun cameraPermission() {        if (ContextCompat.checkSelfPermission(                this,                Manifest.permission.CAMERA            ) != PackageManager.PERMISSION_GRANTED        ) {            if (ActivityCompat.shouldShowRequestPermissionRationale(                    this,                    Manifest.permission.CAMERA                )            ) {                ActivityCompat.requestPermissions(                    this,                    arrayOf(Manifest.permission.CAMERA),                    1                )            } else {                ActivityCompat.requestPermissions(                    this,                    arrayOf(Manifest.permission.CAMERA),                    1                )            }        } else {            dispatchTakePictureIntent()        }    }    private fun galleryPermission() {        if (ContextCompat.checkSelfPermission(                this,                Manifest.permission.WRITE_EXTERNAL_STORAGE            ) != PackageManager.PERMISSION_GRANTED        ) {            if (ActivityCompat.shouldShowRequestPermissionRationale(                    this,                    Manifest.permission.CAMERA                )            ) {                ActivityCompat.requestPermissions(                    this,                    arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE),                    2                )            } else {                ActivityCompat.requestPermissions(                    this,                    arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE),                    2                )            }        } else {            actionGallery()        }    }    private fun actionGallery() {        val pickPhoto = Intent(            Intent.ACTION_PICK,            MediaStore.Images.Media.EXTERNAL_CONTENT_URI        )        startActivityForResult(pickPhoto, 2)    }    private fun dispatchTakePictureIntent() {        val outputImage =            File(externalCacheDir, File.separator + "pengaduan.png")        outputImage.createNewFile()        file = File(outputImage.path)        uri = if (Build.VERSION.SDK_INT >= 24) {            FileProvider.getUriForFile(                this,                BuildConfig.APPLICATION_ID + ".provider",                outputImage            )        } else {            Uri.fromFile(outputImage)        }        val intent = Intent("android.media.action.IMAGE_CAPTURE")        intent.putExtra(MediaStore.EXTRA_OUTPUT, uri)        startActivityForResult(intent, 1)    }    override fun onRequestPermissionsResult(        requestCode1: Int,        permissions1: Array<out String>,        grantResults1: IntArray    ) {        super.onRequestPermissionsResult(requestCode1, permissions1!!, grantResults1)        if(requestCode1 == 1){            if(grantResults1[0] == PackageManager.PERMISSION_GRANTED){                dispatchTakePictureIntent()            }        }        else if (requestCode1 == 2) {            if(grantResults1[0] == PackageManager.PERMISSION_GRANTED){                actionGallery()            }        }    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        super.onActivityResult(requestCode, resultCode, data)        if (requestCode == 1 && resultCode == Activity.RESULT_OK) {            val bitmap = BitmapFactory.decodeFile(file?.path)            file = ImageUtils.checkImage(bitmap, file!!)            Glide.with(this)                .load(file)                .diskCacheStrategy(DiskCacheStrategy.NONE)                .skipMemoryCache(true)                .into(binding.ivPhoto)        } else if (requestCode == 2) {            if (resultCode === Activity.RESULT_OK && data != null) {                uri = data.data!!                val fileGall = File(ImageUtils.getRealPathFromURI(this, uri))                val bitmap = BitmapFactory.decodeFile(fileGall.path)                file = ImageUtils.resizeImgGallery(this, fileGall, uri)                binding.ivPhoto.setImageURI(uri)            }        }        binding.llBlankImg.visibility = View.GONE        binding.rlImage.visibility = View.VISIBLE    }    private fun dialogConfirm() {        ConfirmMessage(            this, "Apakah rincian pesanan Anda sudah benar?",            "", "", "Lanjutkan", "Batal",            object : FGCallback {                override fun onCallback() {                }            }        )    }    override fun onItemClick() {    }    override fun onItemSelected(value: String?, id: String) {    }    override fun onItemSelected(value: String?, id: String, type: Int) {    }}