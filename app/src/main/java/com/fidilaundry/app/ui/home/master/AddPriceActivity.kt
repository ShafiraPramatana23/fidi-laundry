package com.fidilaundry.app.ui.home.masterimport android.os.Bundleimport android.text.InputTypeimport android.view.Viewimport androidx.lifecycle.Observerimport com.fidilaundry.app.Rimport com.fidilaundry.app.basearch.localpref.PaperPrefsimport com.fidilaundry.app.basearch.viewmodel.MasterViewModelimport com.fidilaundry.app.databinding.ActivityAddPriceBindingimport com.fidilaundry.app.model.request.AddItemRequestimport com.fidilaundry.app.model.request.DeleteItemRequestimport com.fidilaundry.app.model.request.UpdateItemRequestimport com.fidilaundry.app.model.response.*import com.fidilaundry.app.ui.base.BaseActivityimport com.fidilaundry.app.ui.home.order.interfaces.IFItemClickimport com.fidilaundry.app.util.LoadingDialogimport com.fidilaundry.app.util.dialog.DialogDropdownimport com.fidilaundry.app.util.fdialog.ConfirmMessageimport com.fidilaundry.app.util.fdialog.ErrorMessageimport com.fidilaundry.app.util.fdialog.FGCallbackimport com.fidilaundry.app.util.fdialog.SuccessMessageimport com.fidilaundry.app.util.setSafeOnClickListenerimport org.koin.androidx.viewmodel.ext.android.getViewModelimport java.util.ArrayListclass AddPriceActivity : BaseActivity(), IFItemClick {    lateinit var paperPrefs: PaperPrefs    lateinit var loadingDialog: LoadingDialog    private var typeDropdown: Int = 0    private var serviceList: MutableList<ResultData> = ArrayList()    private var ctgList: MutableList<ResultData> = ArrayList()    private var data: ItemListResponse.Result? = null    private val binding: ActivityAddPriceBinding by binding(R.layout.activity_add_price)    private val viewModel: MasterViewModel by lazy {        getViewModel(MasterViewModel::class)    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        binding.apply {            lifecycleOwner = this@AddPriceActivity            this.vm = viewModel        }        loadingDialog = LoadingDialog()        initViewModel()        viewModel.getService()        viewModel.getCategory()        var type = intent.getStringExtra("type")        when (type) {            "1" -> {                binding.llUpDel.visibility = View.GONE                binding.btnSubmit.visibility = View.VISIBLE                binding.tvTitle.text = "Tambah Harga"            }            "2" -> {                binding.llUpDel.visibility = View.VISIBLE                binding.btnSubmit.visibility = View.GONE                binding.tvTitle.text = "Ubah Harga"                data = intent.getSerializableExtra("data") as ItemListResponse.Result?                setData()            }        }        binding.etCtg.inputType = InputType.TYPE_NULL//        binding.etBarang.inputType = InputType.TYPE_NULL        binding.etService.inputType = InputType.TYPE_NULL        binding.ivBack.setSafeOnClickListener {            finish()        }        binding.btnDelete.setSafeOnClickListener {            confirmDelete()        }        binding.btnUpdate.setSafeOnClickListener {            confirmUpdate()        }        binding.etCtg.setSafeOnClickListener {            typeDropdown = 1            val myRoundedBottomSheet = DialogDropdown(1, ctgList, this)            myRoundedBottomSheet.show(supportFragmentManager, myRoundedBottomSheet.tag)        }        binding.etService.setSafeOnClickListener {            typeDropdown = 3            val myRoundedBottomSheet = DialogDropdown(3, serviceList, this)            myRoundedBottomSheet.show(supportFragmentManager, myRoundedBottomSheet.tag)        }//        binding.etBarang.setSafeOnClickListener {//            typeDropdown = 2//            val myRoundedBottomSheet = DialogDropdown(2, serviceList, this)//            myRoundedBottomSheet.show(supportFragmentManager, myRoundedBottomSheet.tag)//        }        binding.btnSubmit.setSafeOnClickListener {            viewModel.addItems(AddItemRequest(                viewModel.itemsValue.value,                viewModel.ctgIdValue.value,                viewModel.serviceIdValue.value,                viewModel.priceValue.value.toInt()            ))        }    }    private fun setData() {        viewModel.ctgIdValue.value = data?.categoryID.toString()        viewModel.ctgValue.value = data?.categoryTitle.toString()        viewModel.serviceIdValue.value = data?.serviceID.toString()        viewModel.serviceValue.value = data?.serviceTitle.toString()        viewModel.itemsValue.value = data?.title.toString()        viewModel.priceValue.value = data?.price.toString()    }    private fun initViewModel() {        viewModel.serviceResponse.observe(this, Observer {            handleWhenServiceSuccess(it)        })        viewModel.categoryResponse.observe(this, Observer {            handleWhenCategorySuccess(it)        })        viewModel.itemsAddResponse.observe(this, Observer {            handleWhenAddSuccess(it)        })        viewModel.itemsUpdateResponse.observe(this, Observer {            handleWhenUpdateSuccess(it)        })        viewModel.itemsDeleteResponse.observe(this, Observer {            handleWhenDeleteSuccess(it)        })        viewModel.showProgressLiveData.observe(this, Observer { showLoading ->            if (showLoading) {                if(loadingDialog != null){                    if(!loadingDialog.isShowLoad())                        loadingDialog.showProgressDialog(this, "Mohon tunggu…")                    else {                        loadingDialog.dismissDialog()                        loadingDialog.showProgressDialog(this, "Mohon tunggu…")                    }                }            } else {                loadingDialog.dismissDialog()            }        })        viewModel.showError.observe(this, Observer { showError ->            ErrorMessage(this, "", showError)        })    }    private fun handleWhenDeleteSuccess(it: BaseObjResponse?) {        SuccessMessage(this, "Sukses", "Hapus item berhasil!", object : FGCallback {            override fun onCallback() {                finish()            }        })    }    private fun handleWhenUpdateSuccess(it: BaseObjResponse?) {        SuccessMessage(this, "Sukses", "Ubah item berhasil!", object : FGCallback {            override fun onCallback() {                finish()            }        })    }    private fun handleWhenAddSuccess(it: BaseObjResponse?) {        SuccessMessage(this, "Sukses", "Tambah item berhasil!", object : FGCallback {            override fun onCallback() {                finish()            }        })    }    private fun handleWhenCategorySuccess(it: CategoryListResponse?) {        ctgList = it?.results as MutableList<ResultData>    }    private fun handleWhenServiceSuccess(it: ServiceListResponse?) {        serviceList = it?.results as MutableList<ResultData>    }    private fun confirmDelete() {        ConfirmMessage(            this,            "Apakah Anda yakin menghapus data ini?",            "", "",            "Hapus", "Batal",            object : FGCallback {                override fun onCallback() {                    viewModel.deleteItems(DeleteItemRequest(data?.id.toString()))                }            }        )    }    private fun confirmUpdate() {        ConfirmMessage(            this,            "Apakah Anda yakin mengubah data ini?",            "", "",            "Ubah", "Batal",            object : FGCallback {                override fun onCallback() {                    viewModel.updateItems(UpdateItemRequest(                        data?.id.toString(), viewModel.itemsValue.value,                        viewModel.ctgIdValue.value, viewModel.serviceIdValue.value,                        viewModel.priceValue.value.toDouble()                    ))                }            }        )    }    override fun onItemClick() {    }//    private val ctgList: List<DropdownItem>//        get() {//            val appList: MutableList<DropdownItem> = ArrayList()//            appList.add(DropdownItem(1, "Satuan"))//            appList.add(DropdownItem(2, "Kiloan"))//            return appList//        }////    private val serviceList: List<DropdownItem>//        get() {//            val appList: MutableList<DropdownItem> = ArrayList()//            appList.add(DropdownItem(1, "Cuci Kering"))//            appList.add(DropdownItem(2, "Cuci Basah"))//            appList.add(DropdownItem(3, "Cuci Setrika"))//            appList.add(DropdownItem(4, "Setrika"))//            return appList//        }    override fun onItemSelected(value: String?, id: String) {        when (typeDropdown) {            1 -> {                viewModel.ctgIdValue.value = id                viewModel.ctgValue.value = value!!            }//            2 -> {//                viewModel.itemsValue.value = value!!//            }            3 -> {                viewModel.serviceIdValue.value = id                viewModel.serviceValue.value = value!!            }        }        println("wkwkwkw :: "+value)    }    override fun onItemSelected(value: String?, id: String, type: Int) {    }}