package com.fidilaundry.app.ui.complaintimport android.Manifestimport android.app.Activityimport android.app.AlertDialogimport android.content.Intentimport android.content.pm.PackageManagerimport android.graphics.BitmapFactoryimport android.net.Uriimport android.os.Buildimport android.os.Bundleimport android.provider.MediaStoreimport android.text.InputTypeimport android.view.Viewimport android.webkit.MimeTypeMapimport androidx.annotation.NonNullimport androidx.core.app.ActivityCompatimport androidx.core.content.ContextCompatimport androidx.core.content.FileProviderimport androidx.lifecycle.Observerimport com.bumptech.glide.Glideimport com.bumptech.glide.load.engine.DiskCacheStrategyimport com.fidilaundry.app.BuildConfigimport com.fidilaundry.app.Rimport com.fidilaundry.app.basearch.localpref.PaperPrefsimport com.fidilaundry.app.basearch.viewmodel.ComplaintViewModelimport com.fidilaundry.app.databinding.ActivityUserComplaintBindingimport com.fidilaundry.app.model.request.UserComplaintRequestimport com.fidilaundry.app.model.response.BaseResponseimport com.fidilaundry.app.model.response.UpdateStatusResponseimport com.fidilaundry.app.model.response.UploadImgResponseimport com.fidilaundry.app.ui.base.BaseActivityimport com.fidilaundry.app.ui.home.master.model.DropdownItemimport com.fidilaundry.app.ui.home.order.interfaces.IFItemClickimport com.fidilaundry.app.util.ImageUtilsimport com.fidilaundry.app.util.LoadingDialogimport com.fidilaundry.app.util.dialog.DialogServiceimport com.fidilaundry.app.util.fdialog.ConfirmMessageimport com.fidilaundry.app.util.fdialog.ErrorMessageimport com.fidilaundry.app.util.fdialog.FGCallbackimport com.fidilaundry.app.util.fdialog.SuccessMessageimport com.fidilaundry.app.util.setSafeOnClickListenerimport okhttp3.MediaType.Companion.toMediaTypeOrNullimport okhttp3.RequestBody.Companion.asRequestBodyimport org.koin.androidx.viewmodel.ext.android.getViewModelimport java.io.Fileimport java.util.*class UserComplaintActivity : BaseActivity(), IFItemClick {    lateinit var paperPrefs: PaperPrefs    lateinit var loadingDialog: LoadingDialog    lateinit var uri: Uri    private var file: File? = null    private var isGallery = false    private var orderId: Int = 0    private var transId: String = ""    private val binding: ActivityUserComplaintBinding by binding(R.layout.activity_user_complaint)    private val viewModel: ComplaintViewModel by lazy {        getViewModel(ComplaintViewModel::class)    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        binding.apply {            lifecycleOwner = this@UserComplaintActivity            this.vm = viewModel        }        loadingDialog = LoadingDialog()        orderId = intent.getIntExtra("orderId", 0)        transId = intent.getStringExtra("transId").toString()        initViewModel()        binding.etCtg.inputType = InputType.TYPE_NULL        binding.ivClose.setSafeOnClickListener {            binding.llBlankImg.visibility = View.VISIBLE            binding.rlImage.visibility = View.GONE            file = null        }        binding.llBlankImg.setSafeOnClickListener {            selectImage()        }        binding.ivBack.setSafeOnClickListener {            finish()        }        binding.etCtg.setSafeOnClickListener {            val myRoundedBottomSheet = DialogService(2,  ctgList, this)            myRoundedBottomSheet.show(supportFragmentManager, myRoundedBottomSheet.tag)        }        binding.btnSubmit.setSafeOnClickListener {            dialogConfirm()        }    }    private fun initViewModel() {        viewModel.addUserComplaint.observe(this, Observer {            handleWhenAddComplaintSuccess(it)        })        viewModel.updateOrderStatusResponse.observe(this, Observer {            handleWhenUpdateStatusSuccess(it)        })        viewModel.uploadImgRes.observe(this, Observer {            handleWhenUploadImgSuccess(it)        })        viewModel.showProgressLiveData.observe(this, Observer { showLoading ->            if (showLoading) {                if(loadingDialog != null){                    if(!loadingDialog.isShowLoad())                        loadingDialog.showProgressDialog(this, "Mohon tunggu…")                    else {                        loadingDialog.dismissDialog()                        loadingDialog.showProgressDialog(this, "Mohon tunggu…")                    }                }            } else {                loadingDialog.dismissDialog()            }        })        viewModel.showError.observe(this, Observer { showError ->            ErrorMessage(this, "", showError)        })    }    private fun handleWhenUploadImgSuccess(it: UploadImgResponse?) {        viewModel.addUserComplaint(            UserComplaintRequest(                orderId,                viewModel.ctgValue.value,                viewModel.desc.value,                "${it?.bucket.toString()}/${it?.name.toString()}"            )        )    }    private fun handleWhenUpdateStatusSuccess(it: UpdateStatusResponse?) {    }    private fun handleWhenAddComplaintSuccess(it: BaseResponse?) {        SuccessMessage(this, "Sukses", "Pengaduan berhasil, mohon tunggu feedback dari laundry!", object : FGCallback {            override fun onCallback() {                finish()            }        })    }    private val ctgList: List<DropdownItem>        get() {            val appList: MutableList<DropdownItem> = ArrayList()            appList.add(DropdownItem(1, "Pakaian Hilang"))            appList.add(DropdownItem(2, "Pakaian Kotor"))            appList.add(DropdownItem(2, "Pakaian Rusak"))            return appList        }    private fun selectImage() {        val getImageFrom =            AlertDialog.Builder(this)        getImageFrom.setTitle("Unggah Gambar")        val opsChars = arrayOf<CharSequence>("Kamera", "Galeri")        getImageFrom.setItems(            opsChars        ) { dialog, which ->            if (which == 0) {                isGallery = false                cameraPermission()            } else if (which == 1) {                isGallery = true                galleryPermission()            }            dialog.dismiss()        }        getImageFrom.show()    }    private fun cameraPermission() {        if (ContextCompat.checkSelfPermission(                this,                Manifest.permission.CAMERA            ) != PackageManager.PERMISSION_GRANTED        ) {            if (ActivityCompat.shouldShowRequestPermissionRationale(                    this,                    Manifest.permission.CAMERA                )            ) {                ActivityCompat.requestPermissions(                    this,                    arrayOf(Manifest.permission.CAMERA),                    1                )            } else {                ActivityCompat.requestPermissions(                    this,                    arrayOf(Manifest.permission.CAMERA),                    1                )            }        } else {            dispatchTakePictureIntent()        }    }    private fun galleryPermission() {        if (ContextCompat.checkSelfPermission(                this,                Manifest.permission.WRITE_EXTERNAL_STORAGE            ) != PackageManager.PERMISSION_GRANTED        ) {            if (ActivityCompat.shouldShowRequestPermissionRationale(                    this,                    Manifest.permission.CAMERA                )            ) {                ActivityCompat.requestPermissions(                    this,                    arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE),                    2                )            } else {                ActivityCompat.requestPermissions(                    this,                    arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE),                    2                )            }        } else {            actionGallery()        }    }    private fun actionGallery() {        val pickPhoto = Intent(            Intent.ACTION_PICK,            MediaStore.Images.Media.EXTERNAL_CONTENT_URI        )        startActivityForResult(pickPhoto, 2)    }    private fun dispatchTakePictureIntent() {        val outputImage =            File(externalCacheDir, File.separator + "pengaduan.png")        outputImage.createNewFile()        file = File(outputImage.path)        uri = if (Build.VERSION.SDK_INT >= 24) {            FileProvider.getUriForFile(                this,                BuildConfig.APPLICATION_ID + ".provider",                outputImage            )        } else {            Uri.fromFile(outputImage)        }        val intent = Intent("android.media.action.IMAGE_CAPTURE")        intent.putExtra(MediaStore.EXTRA_OUTPUT, uri)        startActivityForResult(intent, 1)    }    override fun onRequestPermissionsResult(        requestCode1: Int,        permissions1: Array<out String>,        grantResults1: IntArray    ) {        super.onRequestPermissionsResult(requestCode1, permissions1!!, grantResults1)        if(requestCode1 == 1){            if(grantResults1[0] == PackageManager.PERMISSION_GRANTED){                dispatchTakePictureIntent()            }        }        else if (requestCode1 == 2) {            if(grantResults1[0] == PackageManager.PERMISSION_GRANTED){                actionGallery()            }        }    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        super.onActivityResult(requestCode, resultCode, data)        if (requestCode == 1 && resultCode == Activity.RESULT_OK) {            val bitmap = BitmapFactory.decodeFile(file?.path)            file = ImageUtils.checkImage(bitmap, file!!)            Glide.with(this)                .load(file)                .diskCacheStrategy(DiskCacheStrategy.NONE)                .skipMemoryCache(true)                .into(binding.ivPhoto)        } else if (requestCode == 2) {            if (resultCode === Activity.RESULT_OK && data != null) {                uri = data.data!!                val fileGall = File(ImageUtils.getRealPathFromURI(this, uri))                val bitmap = BitmapFactory.decodeFile(fileGall.path)                file = ImageUtils.resizeImgGallery(this, fileGall, uri)                binding.ivPhoto.setImageURI(uri)            }        }        binding.llBlankImg.visibility = View.GONE        binding.rlImage.visibility = View.VISIBLE    }    private fun dialogConfirm() {        ConfirmMessage(            this, "Apakah Anda yakin ingin melanjutkan pengaduan?",            "", "", "Ya, lanjutkan", "Batal",            object : FGCallback {                override fun onCallback() {                    var type = contentResolver.getType(uri)?.toMediaTypeOrNull()                    viewModel.uploadImg(                        type.toString(),                        "hihi."+type.toString().split("/")[1],                        file!!.asRequestBody(contentResolver.getType(uri)?.toMediaTypeOrNull())                    )                }            }        )    }    override fun onItemClick() {}    override fun onItemSelected(value: String?, id: String) {        viewModel.ctgValue.value = value.toString()    }    override fun onItemSelected(value: String?, id: String, type: Int) {}}