package com.fidilaundry.app.ui.complaintimport android.Manifestimport android.app.Activityimport android.app.AlertDialogimport android.content.Intentimport android.content.pm.PackageManagerimport android.graphics.BitmapFactoryimport android.net.Uriimport android.os.Buildimport android.os.Bundleimport android.provider.MediaStoreimport android.text.InputTypeimport android.view.Viewimport androidx.core.app.ActivityCompatimport androidx.core.content.ContextCompatimport androidx.core.content.FileProviderimport androidx.lifecycle.Observerimport com.bumptech.glide.Glideimport com.bumptech.glide.load.engine.DiskCacheStrategyimport com.fidilaundry.app.BuildConfigimport com.fidilaundry.app.Rimport com.fidilaundry.app.basearch.localpref.PaperPrefsimport com.fidilaundry.app.basearch.viewmodel.ComplaintViewModelimport com.fidilaundry.app.databinding.ActivityDetailComplaintBindingimport com.fidilaundry.app.databinding.ActivityUserComplaintBindingimport com.fidilaundry.app.model.request.UpdateOrderStatusRequestimport com.fidilaundry.app.model.request.UserComplaintRequestimport com.fidilaundry.app.model.response.BaseResponseimport com.fidilaundry.app.model.response.ComplaintListResponseimport com.fidilaundry.app.model.response.UpdateStatusResponseimport com.fidilaundry.app.ui.base.BaseActivityimport com.fidilaundry.app.ui.home.master.model.DropdownItemimport com.fidilaundry.app.ui.home.order.interfaces.IFItemClickimport com.fidilaundry.app.util.ImageUtilsimport com.fidilaundry.app.util.LoadingDialogimport com.fidilaundry.app.util.StatusHelperimport com.fidilaundry.app.util.dialog.DialogServiceimport com.fidilaundry.app.util.fdialog.ConfirmMessageimport com.fidilaundry.app.util.fdialog.ErrorMessageimport com.fidilaundry.app.util.fdialog.FGCallbackimport com.fidilaundry.app.util.fdialog.SuccessMessageimport com.fidilaundry.app.util.setSafeOnClickListenerimport org.koin.androidx.viewmodel.ext.android.getViewModelimport java.io.Fileimport java.util.ArrayListclass DetailComplaintActivity : BaseActivity() {    lateinit var loadingDialog: LoadingDialog    private var data: ComplaintListResponse.Result? = null    private val binding: ActivityDetailComplaintBinding by binding(R.layout.activity_detail_complaint)    private val viewModel: ComplaintViewModel by lazy {        getViewModel(ComplaintViewModel::class)    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        binding.apply {            lifecycleOwner = this@DetailComplaintActivity            this.vm = viewModel        }        loadingDialog = LoadingDialog()        data = intent.getSerializableExtra("data") as ComplaintListResponse.Result        binding.tvCustName.text = data?.order?.orderFor?.name        binding.tvTitle.text = data?.category        binding.tvDesc.text = data?.description        if (data!!.file?.isNotEmpty()!!) {            binding.ivComplaint.visibility = View.VISIBLE            Glide.with(this)                .load("https://storage.googleapis.com/"+data?.file)                .diskCacheStrategy(DiskCacheStrategy.NONE)                .skipMemoryCache(true)                .timeout(6000)                .into(binding.ivComplaint)        } else {            binding.ivComplaint.visibility = View.GONE        }        if (data?.feedbacks?.size!! > 0) {            binding.rlWaiting.visibility = View.GONE            binding.llFeeback.visibility = View.VISIBLE            binding.tvDescFeedback.text = data?.feedbacks?.get(0)?.description            if (data?.feedbacks?.get(0)?.file?.isNotEmpty()!!) {                Glide.with(this)                    .load("https://storage.googleapis.com/" + data?.feedbacks?.get(0)?.file)                    .diskCacheStrategy(DiskCacheStrategy.NONE)                    .skipMemoryCache(true)                    .into(binding.ivFeedback)            } else {                binding.ivFeedback.visibility = View.GONE            }        } else {            binding.rlWaiting.visibility = View.VISIBLE            binding.llFeeback.visibility = View.GONE        }        binding.ivBack.setSafeOnClickListener {            finish()        }    }}