package com.fidilaundry.app.ui.home.orderimport android.os.Bundleimport android.widget.Toastimport androidx.activity.result.contract.ActivityResultContractsimport androidx.appcompat.app.AppCompatDelegateimport androidx.core.os.LocaleListCompatimport androidx.lifecycle.Observerimport com.fidilaundry.app.Rimport com.fidilaundry.app.basearch.viewmodel.OrderViewModelimport com.fidilaundry.app.databinding.ActivityPaymentBindingimport com.fidilaundry.app.model.response.OrderListResponseimport com.fidilaundry.app.ui.base.BaseActivityimport com.fidilaundry.app.ui.history.adapter.HistoryAdapterimport com.fidilaundry.app.ui.home.order.interfaces.IFOrderimport com.fidilaundry.app.util.LoadingDialogimport com.fidilaundry.app.util.dialog.DialogConfirmOrderimport com.fidilaundry.app.util.fdialog.ErrorMessageimport com.fidilaundry.app.util.setSafeOnClickListenerimport com.midtrans.sdk.uikit.api.model.CustomColorThemeimport com.midtrans.sdk.uikit.api.model.TransactionResultimport com.midtrans.sdk.uikit.external.UiKitApiimport com.midtrans.sdk.uikit.internal.util.UiKitConstantsimport kotlinx.android.synthetic.main.fragment_home.*import org.koin.androidx.viewmodel.ext.android.getViewModelclass PaymentActivity : BaseActivity(), IFOrder {    lateinit var loadingDialog: LoadingDialog    private var adapter: HistoryAdapter? = null    private val binding: ActivityPaymentBinding by binding(R.layout.activity_payment)    private val viewModel: OrderViewModel by lazy {        getViewModel(OrderViewModel::class)    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        binding.apply {            lifecycleOwner = this@PaymentActivity            this.vm = viewModel        }        loadingDialog = LoadingDialog()        initViewModel()        binding.ivBack.setSafeOnClickListener {            finish()        }        UiKitApi.Builder()            .withMerchantClientKey("SB-Mid-client-JvLoJNS4cBq-0w4L") // client_key is mandatory            .withContext(this) // context is mandatory            .withMerchantUrl("https://merchant-url-sandbox.com/") // set transaction finish callback (sdk callback)            .enableLog(true) // enable sdk log (optional)//            .withFontFamily(ASSET_FONT)            .withColorTheme(CustomColorTheme("#FFE51255", "#B61548", "#FFE51255"))            .build()        setLocaleNew("id")        val launcher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->            if (result?.resultCode == RESULT_OK) {                result.data?.let {                    val transactionResult = it.getParcelableExtra<TransactionResult>(UiKitConstants.KEY_TRANSACTION_RESULT)                    Toast.makeText(this,"${transactionResult?.transactionId}", Toast.LENGTH_LONG).show()                }            }        }        binding.btnSubmit.setSafeOnClickListener {            UiKitApi.getDefaultInstance().startPaymentUiFlow(                this@PaymentActivity, // Activity                launcher, // ActivityResultLauncher                "25e3659b-f00c-4d98-bfff-9f72978c8df5" // Snap Token            )        }    }    private fun setLocaleNew(languageCode: String?) {        val locales = LocaleListCompat.forLanguageTags(languageCode)        AppCompatDelegate.setApplicationLocales(locales)    }    private fun initViewModel() {//        viewModel.orderListResponse.observe(this, Observer {//            handleWhenListSuccess(it)//        })        viewModel.showProgressLiveData.observe(this, Observer { showLoading ->            if (showLoading) {                if(loadingDialog != null){                    if(!loadingDialog.isShowLoad())                        loadingDialog.showProgressDialog(this, "Mohon tunggu…")                    else {                        loadingDialog.dismissDialog()                        loadingDialog.showProgressDialog(this, "Mohon tunggu…")                    }                }            } else {                loadingDialog.dismissDialog()            }        })        viewModel.showError.observe(this, Observer { showError ->            ErrorMessage(this, "", showError)        })    }    override fun onResume() {        super.onResume()//        viewModel.getOrderList("","","", "")    }    override fun onItemClick(data: OrderListResponse.Result) {        val myRoundedBottomSheet = DialogConfirmOrder(data, this)        myRoundedBottomSheet.show(supportFragmentManager, myRoundedBottomSheet.tag)    }    override fun onDialogDismiss() {        // refresh list//        viewModel.getOrderList("","","", "")    }}