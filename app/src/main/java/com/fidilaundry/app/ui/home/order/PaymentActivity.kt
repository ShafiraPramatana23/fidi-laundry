package com.fidilaundry.app.ui.home.orderimport android.content.Intentimport android.os.Bundleimport android.widget.Toastimport androidx.activity.result.contract.ActivityResultContractsimport androidx.appcompat.app.AppCompatDelegateimport androidx.core.os.LocaleListCompatimport androidx.lifecycle.Observerimport com.fidilaundry.app.Rimport com.fidilaundry.app.basearch.viewmodel.PaymentViewModelimport com.fidilaundry.app.databinding.ActivityPaymentBindingimport com.fidilaundry.app.model.request.UpdatePaymentRequestimport com.fidilaundry.app.model.response.BaseResponseimport com.fidilaundry.app.ui.base.BaseActivityimport com.fidilaundry.app.util.LoadingDialogimport com.fidilaundry.app.util.fdialog.ErrorMessageimport com.fidilaundry.app.util.fdialog.FGCallbackimport com.fidilaundry.app.util.fdialog.SuccessMessageimport com.fidilaundry.app.util.fdialog.WarningMessageimport com.fidilaundry.app.util.setSafeOnClickListenerimport com.midtrans.sdk.uikit.api.model.TransactionResultimport com.midtrans.sdk.uikit.external.UiKitApiimport com.midtrans.sdk.uikit.internal.util.UiKitConstantsimport com.midtrans.sdk.uikit.internal.util.UiKitConstants.STATUS_CANCELEDimport com.midtrans.sdk.uikit.internal.util.UiKitConstants.STATUS_FAILEDimport com.midtrans.sdk.uikit.internal.util.UiKitConstants.STATUS_INVALIDimport com.midtrans.sdk.uikit.internal.util.UiKitConstants.STATUS_PENDINGimport com.midtrans.sdk.uikit.internal.util.UiKitConstants.STATUS_SUCCESSimport org.koin.androidx.viewmodel.ext.android.getViewModelclass PaymentActivity : BaseActivity() {    lateinit var loadingDialog: LoadingDialog    private var paymentId: Int = 0    private val binding: ActivityPaymentBinding by binding(R.layout.activity_payment)    private val viewModel: PaymentViewModel by lazy {        getViewModel(PaymentViewModel::class)    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        binding.apply {            lifecycleOwner = this@PaymentActivity            this.vm = viewModel        }        loadingDialog = LoadingDialog()        var snapToken = intent.getStringExtra("snapToken").toString()        paymentId = intent.getIntExtra("paymentId", 0)        initViewModel()        binding.ivBack.setSafeOnClickListener {            finish()        }        UiKitApi.Builder()            .withMerchantClientKey("SB-Mid-client-JvLoJNS4cBq-0w4L")            .withContext(this)            .withMerchantUrl("https://merchant-url-sandbox.com/")            .enableLog(true)            .build()        setLocaleNew("id")        val launcher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->            if (result?.resultCode == RESULT_OK) {                result.data?.let {                    val transactionResult = it.getParcelableExtra<TransactionResult>(UiKitConstants.KEY_TRANSACTION_RESULT)                    Toast.makeText(this,"${transactionResult?.transactionId}", Toast.LENGTH_LONG).show()                }            }        }        UiKitApi.getDefaultInstance().startPaymentUiFlow(            this@PaymentActivity,            launcher,            snapToken        )    }    private fun setLocaleNew(languageCode: String?) {        val locales = LocaleListCompat.forLanguageTags(languageCode)        AppCompatDelegate.setApplicationLocales(locales)    }    private fun initViewModel() {        viewModel.updatePaymentResponse.observe(this, Observer {            handleWhenUpdatePaymentSuccess(it)        })        viewModel.showProgressLiveData.observe(this, Observer { showLoading ->            if (showLoading) {                if(loadingDialog != null){                    if(!loadingDialog.isShowLoad())                        loadingDialog.showProgressDialog(this, "Mohon tunggu…")                    else {                        loadingDialog.dismissDialog()                        loadingDialog.showProgressDialog(this, "Mohon tunggu…")                    }                }            } else {                loadingDialog.dismissDialog()            }        })        viewModel.showError.observe(this, Observer { showError ->            ErrorMessage(this, "", showError)        })    }    private fun handleWhenUpdatePaymentSuccess(it: BaseResponse?) {        SuccessMessage(this, "Pembayaran Berhasil!", "Terimakasih telah melakukan transaksi di FIDI Laundry", object : FGCallback {            override fun onCallback() {                finish()            }        })    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        if (resultCode == RESULT_OK) {            val transactionResult = data?.getParcelableExtra<TransactionResult>(                UiKitConstants.KEY_TRANSACTION_RESULT            )            if (transactionResult != null) {                when (transactionResult.status) {                    STATUS_SUCCESS -> {                        Toast.makeText(this, "Transaction Finished. ID: " + transactionResult.transactionId, Toast.LENGTH_LONG).show()                        viewModel.updatePayment(UpdatePaymentRequest(                            paymentId,                            "pembayaran-sukses",                            0.0                        ))                    }                    STATUS_PENDING -> {                        WarningMessage(this, "Transaksi Pending", "Mohon cek berkala untuk melihat perubahan status", object : FGCallback {                            override fun onCallback() {                                finish()                            }                        })//                        Toast.makeText(this, "Transaction Pending. ID: " + transactionResult.transactionId, Toast.LENGTH_LONG).show()                    }                    STATUS_FAILED -> {                        ErrorMessage(this, "Transaksi Gagal", "", object : FGCallback {                            override fun onCallback() {                                finish()                            }                        })//                        Toast.makeText(this, "Transaction Failed. ID: " + transactionResult.transactionId, Toast.LENGTH_LONG).show()                    }                    STATUS_CANCELED -> {                        ErrorMessage(this, "Transaksi Gagal", "", object : FGCallback {                            override fun onCallback() {                                finish()                            }                        })                    }                    STATUS_INVALID -> {                        ErrorMessage(this, "Transaksi Invalid", "", object : FGCallback {                            override fun onCallback() {                                finish()                            }                        })                        Toast.makeText(this, "Transaction Invalid. ID: " + transactionResult.transactionId, Toast.LENGTH_LONG).show()                    }                    else -> {                        Toast.makeText(this, "Transaction ID: " + transactionResult.transactionId + ". Message: " + transactionResult.status, Toast.LENGTH_LONG).show()                    }                }            } else {                ErrorMessage(this, "Transaksi Invalid", "", object : FGCallback {                    override fun onCallback() {                        finish()                    }                })            }        }        super.onActivityResult(requestCode, resultCode, data)    }}