package com.fidilaundry.app.ui.home.orderimport android.content.Intentimport android.os.Bundleimport android.view.Viewimport androidx.lifecycle.Observerimport androidx.recyclerview.widget.LinearLayoutManagerimport com.fidilaundry.app.Rimport com.fidilaundry.app.basearch.viewmodel.OrderViewModelimport com.fidilaundry.app.databinding.ActivityConfirmOrderListBindingimport com.fidilaundry.app.model.response.OrderListResponseimport com.fidilaundry.app.ui.base.BaseActivityimport com.fidilaundry.app.ui.home.order.adapter.ConfirmOrderAdapterimport com.fidilaundry.app.ui.home.order.interfaces.IFOrderimport com.fidilaundry.app.util.LoadingDialogimport com.fidilaundry.app.util.ScrollingLinearLayoutManagerimport com.fidilaundry.app.util.dialog.DialogConfirmOrderimport com.fidilaundry.app.util.fdialog.ErrorMessageimport com.fidilaundry.app.util.setSafeOnClickListenerimport org.koin.androidx.viewmodel.ext.android.getViewModelclass ConfirmOrderListActivity : BaseActivity(), IFOrder {    lateinit var loadingDialog: LoadingDialog    private var adapter: ConfirmOrderAdapter? = null    private var selectedData: OrderListResponse.Result? = null    private val binding: ActivityConfirmOrderListBinding by binding(R.layout.activity_confirm_order_list)    private val viewModel: OrderViewModel by lazy {        getViewModel(OrderViewModel::class)    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        binding.apply {            lifecycleOwner = this@ConfirmOrderListActivity            this.vm = viewModel        }        loadingDialog = LoadingDialog()        initViewModel()        adapter = ConfirmOrderAdapter(this, this)        binding.rv.layoutManager =            ScrollingLinearLayoutManager(this, LinearLayoutManager.VERTICAL, false, 5000)        binding.rv.adapter = adapter//        adapter?.updateList(ctgList)        binding.ivBack.setSafeOnClickListener {            finish()        }    }    private fun initViewModel() {        viewModel.orderListResponse.observe(this, Observer {            handleWhenListSuccess(it)        })        viewModel.showProgressLiveData.observe(this, Observer { showLoading ->            if (showLoading) {                if(loadingDialog != null){                    if(!loadingDialog.isShowLoad())                        loadingDialog.showProgressDialog(this, "Mohon tunggu…")                    else {                        loadingDialog.dismissDialog()                        loadingDialog.showProgressDialog(this, "Mohon tunggu…")                    }                }            } else {                loadingDialog.dismissDialog()            }        })        viewModel.showError.observe(this, Observer { showError ->            ErrorMessage(this, "", showError)        })    }    private fun handleWhenListSuccess(it: OrderListResponse?) {        it?.results?.let { it1 -> adapter?.updateList(it1) }        if (it?.results?.isEmpty()!!) {            binding.llEmpty.visibility = View.VISIBLE        } else {            binding.llEmpty.visibility = View.GONE        }    }    override fun onResume() {        super.onResume()        viewModel.getOrderList("","","", "pending")    }    override fun onItemClick(data: OrderListResponse.Result) {        selectedData = data        val myRoundedBottomSheet = DialogConfirmOrder(data, this)        myRoundedBottomSheet.show(supportFragmentManager, myRoundedBottomSheet.tag)    }    override fun onDialogDismiss() {//        viewModel.getOrderList("","","", "pending")        val intent = Intent(this, AdminOrderMapsActivity::class.java)        intent.putExtra("data", selectedData)        startActivity(intent)    }}