package com.fidilaundry.app.ui.home.orderimport android.os.Bundleimport androidx.lifecycle.Observerimport androidx.recyclerview.widget.LinearLayoutManagerimport com.fidilaundry.app.Rimport com.fidilaundry.app.basearch.viewmodel.OrderViewModelimport com.fidilaundry.app.databinding.ActivityOrderAdminBindingimport com.fidilaundry.app.model.request.ItemServiceimport com.fidilaundry.app.model.request.ItemServiceTitleimport com.fidilaundry.app.model.request.UpdateOrderRequestimport com.fidilaundry.app.model.response.BaseResponseimport com.fidilaundry.app.model.response.ItemListResponseimport com.fidilaundry.app.model.response.OrderDetailResponseimport com.fidilaundry.app.ui.base.BaseActivityimport com.fidilaundry.app.ui.home.order.adapter.SatuanAdapterimport com.fidilaundry.app.ui.home.order.adapter.SatuanPreviewAdapterimport com.fidilaundry.app.ui.home.order.interfaces.IFItemClickimport com.fidilaundry.app.ui.home.order.interfaces.IFSatuanimport com.fidilaundry.app.ui.home.order.model.SelectedSatuanItemimport com.fidilaundry.app.util.*import com.fidilaundry.app.util.dialog.DialogDropdownimport com.fidilaundry.app.util.dialog.DialogSelectSatuanimport com.fidilaundry.app.util.fdialog.ConfirmMessageimport com.fidilaundry.app.util.fdialog.ErrorMessageimport com.fidilaundry.app.util.fdialog.FGCallbackimport com.fidilaundry.app.util.fdialog.SuccessMessageimport org.koin.androidx.viewmodel.ext.android.getViewModelimport java.util.ArrayListclass AdminOrderActivity : BaseActivity(), IFItemClick, IFSatuan {    lateinit var loadingDialog: LoadingDialog    private var typeForm = 0    private var transId = ""    private var serviceId = 0    private var idKiloan = 0    private var dtKiloan: ItemListResponse.Result? = null    private var total = 0    private var fee = 0    private var selectedItem: MutableList<ItemService> = ArrayList()//    private var selectedItemDisplay: MutableList<ItemServiceTitle> = ArrayList()    private var dtDetail: OrderDetailResponse.Result? = null//    private var dtSatuan: List<ItemListResponse.Result> = ArrayList()    private var adapter: SatuanAdapter? = null//    private var adapter: SatuanPreviewAdapter? = null    private val binding: ActivityOrderAdminBinding by binding(R.layout.activity_order_admin)    private val viewModel: OrderViewModel by lazy {        getViewModel(OrderViewModel::class)    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        binding.apply {            lifecycleOwner = this@AdminOrderActivity            this.vm = viewModel        }        loadingDialog = LoadingDialog()        initViewModel()        transId = intent.getStringExtra("transId").toString()        serviceId = intent.getIntExtra("serviceId", 0)        adapter = SatuanAdapter(this, this)//        adapter = SatuanPreviewAdapter(this)        binding.rvSatuan.layoutManager = ScrollingLinearLayoutManager(this, LinearLayoutManager.VERTICAL, false, 5000)        binding.rvSatuan.adapter = adapter        viewModel.getItemsByService(serviceId)        viewModel.getOrderDetail(transId)        binding.btnOrder.setSafeOnClickListener {            if (isCanPay()) {                dialogConfirm()            } else {                ErrorMessage(this, "", "Nominal terlalu besar, mohon cek kembali harga per barang")            }        }        binding.ivBack.setSafeOnClickListener {            finish()        }//        binding.tvLabelSatuan.setSafeOnClickListener {//            val myRoundedBottomSheet = DialogSelectSatuan(dtSatuan, selectedItem this)//            myRoundedBottomSheet.show(supportFragmentManager, myRoundedBottomSheet.tag)//        }    }    private fun initViewModel() {        viewModel.itemsListResponse.observe(this, Observer {            handleWhenItemListSuccess(it)        })        viewModel.orderDetailResponse.observe(this, Observer {            handleWhenDetailSuccess(it)        })        viewModel.kiloan.observe(this, Observer {            dataChange()        })                viewModel.updateOrderResponse.observe(this, Observer {            handleWhenUpdateSuccess(it)        })        viewModel.showProgressLiveData.observe(this, Observer { showLoading ->            if (showLoading) {                if(loadingDialog != null){                    if(!loadingDialog.isShowLoad())                        loadingDialog.showProgressDialog(this, "Mohon tunggu…")                    else {                        loadingDialog.dismissDialog()                        loadingDialog.showProgressDialog(this, "Mohon tunggu…")                    }                }            } else {                loadingDialog.dismissDialog()            }        })        viewModel.showError.observe(this, Observer { showError ->            ErrorMessage(this, "", showError)        })    }    private fun handleWhenUpdateSuccess(it: BaseResponse?) {        SuccessMessage(this, "Sukses", "Update pesanan berhasil!", object : FGCallback {            override fun onCallback() {                finish()            }        })    }    private fun dataChange() {        total = 0        var idx = selectedItem.indexOfFirst { it.item_id == idKiloan }//        if (idx >= 0) {            var totAmount = if (viewModel.kiloan.value == "") {                dtKiloan?.price!! * 0            } else {                dtKiloan?.price!! * viewModel.kiloan.value.toInt()            }            val updateQty = selectedItem[idx].apply {                qty = if (viewModel.kiloan.value == "") 0 else viewModel.kiloan.value.toInt()                amount = totAmount            }            selectedItem[idx] = updateQty//        }        for (i in selectedItem.indices) {            total += selectedItem[i].amount        }        binding.tvItemTotal.text = "${selectedItem.size} item"        binding.tvSubTotal.text = RupiahCurrency.Converter(total.toDouble())        if (dtDetail?.transferMethod == "Antar Jemput") {            fee = 5000            total += fee            binding.tvLayananVal.text = RupiahCurrency.Converter(fee.toDouble())            binding.tvPriceTotal.text = RupiahCurrency.Converter(total.toDouble())        } else {            fee = 0            total += fee            binding.tvLayananVal.text = RupiahCurrency.Converter(0.0)            binding.tvPriceTotal.text = RupiahCurrency.Converter(total.toDouble())        }    }    private fun isCanPay(): Boolean {        var tot = total + fee        return tot <= 10000000    }    private fun handleWhenDetailSuccess(it: OrderDetailResponse?) {        dtDetail = it?.results        binding.tvName.text = dtDetail?.orderFor?.name        binding.tvDate.text = DateTimeFormater(dtDetail?.createdAt!!)        binding.tvAddress.text = dtDetail?.addressDescription        binding.tvService.text = ServiceCtgHelper().getServiceName(dtDetail?.serviceID.toString())        binding.tvLayanan.text = dtDetail?.transferMethod        if (dtDetail?.transferMethod == "Antar Jemput") {            binding.tvLayananVal.text = RupiahCurrency.Converter(5000.0)        } else {            binding.tvLayananVal.text = RupiahCurrency.Converter(0.0)        }    }    private fun handleWhenItemListSuccess(it: ItemListResponse?) {        var dt = it?.results?.filter { it.categoryID == "2" }        idKiloan = dt?.get(0)?.id!!        dtKiloan = dt.get(0)        selectedItem.add(ItemService(idKiloan, 0, 0))        binding.tvPriceKiloan.text = RupiahCurrency.Converter(dtKiloan?.price?.toDouble())//        dtSatuan = it?.results!!        adapter?.updateList(it?.results!!)    }    private fun dialogConfirm() {        ConfirmMessage(            this, "Apakah rincian pesanan Anda sudah benar?",            "", "", "Lanjutkan", "Batal",            object : FGCallback {                override fun onCallback() {                    updateAction()                }            }        )    }    private fun updateAction() {        dataChange()        viewModel.updateOrder(            UpdateOrderRequest(                transId, StatusHelper.setStatus("cek item"), dtDetail?.latitude!!,                dtDetail?.longitude!!, "", selectedItem, fee, total            )        )    }    override fun onItemClick() {}    override fun onItemSelected(value: String?, id: String) {}    override fun onItemSelected(value: String?, id: String, type: Int) {        when (typeForm) {            1 -> viewModel.categoryId.value = id            2 -> viewModel.serviceId.value = id        }    }    override fun onItemSelected(value: SelectedSatuanItem?) {        var idx = selectedItem.indexOfFirst { it.item_id == value?.id }        var totalAmount = value?.price!! * value.qty!!        if (idx >= 0) {            val updateQty = selectedItem[idx].apply {                qty = value.qty!!                amount = totalAmount            }            selectedItem[idx] = updateQty        } else {            selectedItem.add(ItemService(value.id!!, totalAmount, value.qty))        }        dataChange()    }    override fun onDialogDismiss(value: MutableList<ItemService>?, display: MutableList<ItemServiceTitle>?) {        /*selectedItem.addAll(value!!)        selectedItemDisplay = display!!        dataChange()        adapter?.updateList(selectedItemDisplay)*/    }}