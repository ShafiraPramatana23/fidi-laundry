package com.fidilaundry.app.ui.home.masterimport android.os.Bundleimport android.view.Viewimport androidx.lifecycle.Observerimport com.fidilaundry.app.Rimport com.fidilaundry.app.basearch.localpref.PaperPrefsimport com.fidilaundry.app.basearch.viewmodel.CustomerViewModelimport com.fidilaundry.app.basearch.viewmodel.HomeViewModelimport com.fidilaundry.app.databinding.ActivityAddUserBindingimport com.fidilaundry.app.model.response.BaseResponseimport com.fidilaundry.app.ui.base.BaseActivityimport com.fidilaundry.app.util.LoadingDialogimport com.fidilaundry.app.util.fdialog.ErrorMessageimport com.fidilaundry.app.util.fdialog.FGCallbackimport com.fidilaundry.app.util.fdialog.SuccessMessageimport com.fidilaundry.app.util.setSafeOnClickListenerimport org.koin.androidx.viewmodel.ext.android.getViewModelclass AddUserActivity : BaseActivity() {    lateinit var paperPrefs: PaperPrefs    lateinit var loadingDialog: LoadingDialog    private val binding: ActivityAddUserBinding by binding(R.layout.activity_add_user)    private val viewModel: CustomerViewModel by lazy {        getViewModel(CustomerViewModel::class)    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        binding.apply {            lifecycleOwner = this@AddUserActivity            this.vm = viewModel        }        loadingDialog = LoadingDialog()        initViewModel()        var type = intent.getStringExtra("type")        when (type) {            "1" -> {                binding.llUpDel.visibility = View.GONE                binding.tvTitle.text = "Tambah Pelanggan"            }            "2" -> {                binding.llUpDel.visibility = View.VISIBLE                binding.tvTitle.text = "Ubah Pelanggan"            }        }        binding.ivBack.setSafeOnClickListener {            finish()        }        binding.btnSubmit.setSafeOnClickListener {            viewModel.addCustomer()        }    }    private fun initViewModel() {        viewModel.addResponse.observe(this, Observer {            handleWhenAddCustSuccess(it)        })        viewModel.showProgressLiveData.observe(this, Observer { showLoading ->            if (showLoading) {                if(loadingDialog != null){                    if(!loadingDialog.isShowLoad())                        loadingDialog.showProgressDialog(this, "Mohon tunggu…")                    else {                        loadingDialog.dismissDialog()                        loadingDialog.showProgressDialog(this, "Mohon tunggu…")                    }                }            } else {                loadingDialog.dismissDialog()            }        })        viewModel.showError.observe(this, Observer { showError ->            ErrorMessage(this, "", showError)        })    }    private fun handleWhenAddCustSuccess(it: BaseResponse?) {        SuccessMessage(this, "Sukses", "Tambah pelanggan berhasil!", object : FGCallback {            override fun onCallback() {                finish()            }        })    }}